package com.tibudget.dto;

import java.io.Serializable;
import java.util.Date;
import java.util.UUID;

public class AccountDto implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Defines the type of an account, determining how it will be used.
     */
    public enum AccountDtoType {
        /**
         * Accounts that can be used for payments. These accounts will be checked when linking operations
         * of type {@link com.tibudget.dto.OperationDto.OperationDtoType#PURCHASE}.
         */
        PAYMENT,

        /**
         * Accounts that only store money. These accounts are not allowed to have operations
         * of type {@link com.tibudget.dto.OperationDto.OperationDtoType#PURCHASE}.
         */
        SAVING,

        /**
         * Accounts used to represent a loan or credit. These accounts are not allowed to have operations
         * of type {@link com.tibudget.dto.OperationDto.OperationDtoType#PURCHASE}.
         */
        LOAN,

        /**
         * Accounts representing online or physical shops. Any account that contains PURCHASE operations
         * falls into this category.
         */
        SHOPPING,

        /**
         * Accounts representing a person. These accounts are usually created manually to keep track
         * of debts or credits the user has with a specific person.
         */
        PEOPLE
    }

    /**
     * UUID generated by Tibu. If you create a new account then generate one with java.util.UUID.randomUUID().toString().
     */
    private String uuid;

    /**
     * ID used by the collector to identify the account
     */
    private String idForCollector;

    private AccountDtoType type;

    private String label;

    /**
     * Name of the bank or provider of the account (e.g. Paypal, Amazon, etc.)
     */
    private String providerName;

    /**
     * Currency code ISO 4217
     */
    private String currencyCode;

    private double currentBalance;

    /**
     * Last time that bank account has been updated successfully
     */
    private Date lastUpdate;

    /**
     * An ID that collector can set to know what was the last collected
     * operation
     */
    private String lastOperationProviderId;

    /**
     * Constructor usually used by collectors to create a new account
     *
     * @param idFromCollector ID used by the collector to identify the account
     * @param type            Type of account
     * @param label           Label of the account
     * @param providerName    Name of the bank or provider of the account
     * @param currencyCode    Currency code ISO 4217
     * @param currentBalance  Current balance of the account
     */
    public AccountDto(String idFromCollector, AccountDtoType type, String label, String providerName, String currencyCode, double currentBalance) {
        this(UUID.randomUUID().toString(), idFromCollector, type, label, providerName, currencyCode, currentBalance, null, null);
    }

    /**
     * Constructor usually used by Tibu
     *
     * @param uuid                    UUID of the account
     * @param idForCollector          Identifier of the bank account
     * @param type                    Type of account
     * @param title                   Title of the bank account
     * @param providerName            Name of the bank or provider of the account
     * @param currencyCode            Currency code ISO 4217
     * @param currentBalance          Current balance of the account
     * @param lastUpdate              Last time that bank account has been updated successfully
     * @param lastOperationProviderId An ID that collector can set to know what was the last
     *                                collected operation
     */
    public AccountDto(
            String uuid,
            String idForCollector,
            AccountDtoType type,
            String title,
            String providerName,
            String currencyCode,
            double currentBalance,
            Date lastUpdate,
            String lastOperationProviderId
    ) {
        super();
        this.uuid = uuid;
        this.idForCollector = idForCollector;
        this.type = type;
        this.label = title;
        this.providerName = providerName;
        this.currencyCode = currencyCode;
        this.currentBalance = currentBalance;
        this.lastUpdate = lastUpdate;
        this.lastOperationProviderId = lastOperationProviderId;
    }

    public double getCurrentBalance() {
        return currentBalance;
    }

    public void setCurrentBalance(double currentBalance) {
        this.currentBalance = currentBalance;
    }

    public String getIdForCollector() {
        return idForCollector;
    }

    public void setIdForCollector(String idForCollector) {
        this.idForCollector = idForCollector;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public String getLastOperationProviderId() {
        return lastOperationProviderId;
    }

    public void setLastOperationProviderId(String lastOperationProviderId) {
        this.lastOperationProviderId = lastOperationProviderId;
    }

    public Date getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public String getProviderName() {
        return providerName;
    }

    public void setProviderName(String providerName) {
        this.providerName = providerName;
    }

    public AccountDtoType getType() {
        return type;
    }

    public void setType(AccountDtoType type) {
        this.type = type;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true; // Compare by reference
        if (obj == null || getClass() != obj.getClass()) return false; // Check for class compatibility

        AccountDto other = (AccountDto) obj;

        // If at least one object has a UUID defined, compare by UUID
        if (this.uuid != null || other.uuid != null) {
            return this.uuid != null && this.uuid.equals(other.uuid);
        }

        // If at least one object has idForCollector defined, compare by idForCollector
        if (this.idForCollector != null || other.idForCollector != null) {
            return this.idForCollector != null && this.idForCollector.equals(other.idForCollector);
        }

        // Use default Object.equals() behavior if neither UUID nor idForCollector are defined
        return false;
    }

    @Override
    public int hashCode() {
        // Generate hashCode based on UUID if defined
        if (uuid != null) {
            return uuid.hashCode();
        }

        // Generate hashCode based on idForCollector if UUID is not defined
        if (idForCollector != null) {
            return idForCollector.hashCode();
        }

        // Use default hashCode if neither UUID nor idForCollector are defined
        return super.hashCode();
    }
}
