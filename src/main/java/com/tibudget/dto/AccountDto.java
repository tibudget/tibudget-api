package com.tibudget.dto;

import java.io.Serializable;
import java.util.*;

public class AccountDto implements Serializable {

    private static final long serialVersionUID = 1L;

    public static final int LABEL_MAX_LENGTH = 100;
    public static final int PROVIDER_NAME_MAX_LENGTH = 100;

    /**
     * Defines the type of an account, determining how it will be used.
     */
    public enum AccountDtoType {
        /**
         * Accounts that can be used for payments. These accounts will be checked when linking transactions
         * of type {@link TransactionDto.TransactionDtoType#PURCHASE}.
         */
        PAYMENT,

        /**
         * Accounts that only store money. These accounts are not allowed to have transactions
         * of type {@link TransactionDto.TransactionDtoType#PURCHASE}.
         */
        SAVING,

        /**
         * Accounts used to represent a loan or credit. These accounts are not allowed to have transactions
         * of type {@link TransactionDto.TransactionDtoType#PURCHASE}.
         */
        LOAN,

        /**
         * Accounts representing online or physical shops. Any account that contains PURCHASE transactions
         * falls into this category.
         */
        SHOPPING,

        /**
         * Accounts representing a person. These accounts are usually created manually to keep track
         * of debts or credits the user has with a specific person.
         */
        PEOPLE
    }

    /** Common metadata keys : IBAN of the account */
    public static final String METADATA_IBAN = "IBAN";

    /**
     * UUID generated by Tibu. If you create a new account then generate one with java.util.UUID.randomUUID().toString().
     */
    private String uuid;

    private AccountDtoType type;

    private String label;

    /**
     * UUID of the counterparty (e.g. Paypal, Amazon, etc.)
     * You can find it with the CounterpartyProvider or use a fixed value since UUID will be stable.
     * This value is mandatory.
     */
    private String counterPartyUuid;

    /**
     * Currency code ISO 4217
     */
    private String currencyCode;

    private double currentBalance;

    private final Map<String, String> metadatas;

    /**
     * Last time that bank account has been updated successfully
     */
    private Date lastUpdate;

    private final List<PaymentMethodDto> paymentMethods;

    private final List<LoyaltyCardDto> loyaltyCards;

    /**
     * This empty constructor can be usefull for tests
     */
    public AccountDto() {
        super();
        this.metadatas = new HashMap<>();
        this.paymentMethods = new ArrayList<>();
        this.loyaltyCards = new ArrayList<>();
    }

    /**
     * Constructor usually used by collectors to create a new account
     *
     * @param type            Type of account
     * @param label           Label of the account
     * @param counterPartyUuid    Name of the bank or provider of the account
     * @param currencyCode    Currency code ISO 4217
     * @param currentBalance  Current balance of the account
     */
    public AccountDto(AccountDtoType type, String label, String counterPartyUuid, String currencyCode, double currentBalance) {
        this(UUID.randomUUID().toString(), type, label, counterPartyUuid, currencyCode, currentBalance, null);
    }

    /**
     * Constructor usually used by Tibu
     *
     * @param uuid                    UUID of the account
     * @param type                    Type of account
     * @param title                   Title of the bank account
     * @param counterPartyUuid            Name of the bank or provider of the account
     * @param currencyCode            Currency code ISO 4217
     * @param currentBalance          Current balance of the account
     * @param lastUpdate              Last time that bank account has been updated successfully
     */
    public AccountDto(
            String uuid,
            AccountDtoType type,
            String title,
            String counterPartyUuid,
            String currencyCode,
            double currentBalance,
            Date lastUpdate
    ) {
        this();
        this.uuid = uuid;
        this.type = type;
        this.label = title;
        this.counterPartyUuid = counterPartyUuid;
        this.currencyCode = currencyCode;
        this.currentBalance = currentBalance;
        this.lastUpdate = lastUpdate;
    }

    public double getCurrentBalance() {
        return currentBalance;
    }
    public void setCurrentBalance(double currentBalance) {
        this.currentBalance = currentBalance;
    }

    public String getLabel() {
        return label;
    }
    public void setLabel(String label) {
        this.label = label;
    }

    public Date getLastUpdate() {
        return lastUpdate;
    }
    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public String getCurrencyCode() {
        return currencyCode;
    }
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public String getCounterPartyUuid() {
        return counterPartyUuid;
    }
    public void setCounterPartyUuid(String counterPartyUuid) {
        this.counterPartyUuid = counterPartyUuid;
    }

    public AccountDtoType getType() {
        return type;
    }
    public void setType(AccountDtoType type) {
        this.type = type;
    }

    public String getUuid() {
        return uuid;
    }
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /**
     * Returns the metadata map.
     *
     * @return Map of metadata key-value pairs.
     */
    public Map<String, String> getMetadatas() { return Collections.unmodifiableMap(metadatas); }

    /**
     * Retrieves a specific metadata value by key.
     *
     * @param key The metadata key.
     * @return The associated metadata value, or null if not found.
     */
    public String getMetadata(String key) { return metadatas.get(key); }

    /**
     * Sets a metadata key-value pair.
     *
     * @param key   The metadata key.
     * @param data  The metadata value. Set to null to delete the metadata.
     */
    public void setMetadata(String key, String data) {
        if (key != null) {
            if (data != null) {
                this.metadatas.put(key, data);
            }
            else {
                this.metadatas.remove(key);
            }
        }
    }

    public List<PaymentMethodDto> getPaymentMethods() {
        return Collections.unmodifiableList(paymentMethods);
    }

    public void addPaymentMethod(PaymentMethodDto paymentMethod) {
        if (paymentMethod != null) {
            paymentMethods.add(paymentMethod);
        }
    }

    public List<LoyaltyCardDto> getLoyaltyCards() {
        return Collections.unmodifiableList(loyaltyCards);
    }

    public void addLoyaltyCard(LoyaltyCardDto loyaltyCard) {
        if (loyaltyCard != null) {
            loyaltyCards.add(loyaltyCard);
        }
    }

    public boolean hasLoyaltyCard(String reference) {
        if (loyaltyCards == null || reference == null) {
            return false;
        }
        for (LoyaltyCardDto card : loyaltyCards) {
            if (reference.equals(card.getReference())) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true; // Compare by reference
        if (obj == null || getClass() != obj.getClass()) return false; // Check for class compatibility

        AccountDto other = (AccountDto) obj;

        // If at least one object has a UUID defined, compare by UUID
        if (this.uuid != null || other.uuid != null) {
            return this.uuid != null && this.uuid.equals(other.uuid);
        }

        // Use default Object.equals() behavior if UUID is not defined
        return false;
    }

    @Override
    public int hashCode() {
        // Generate hashCode based on UUID if defined
        if (uuid != null) {
            return uuid.hashCode();
        }

        // Use default hashCode if UUID is not defined defined
        return super.hashCode();
    }

    @Override
    public String toString() {
        return "AccountDto{" +
                "uuid='" + uuid + '\'' +
                ", type=" + type +
                ", label='" + label + '\'' +
                ", counterPartyUuid='" + counterPartyUuid + '\'' +
                ", currencyCode='" + currencyCode + '\'' +
                ", currentBalance=" + currentBalance +
                ", metadatas=" + metadatas +
                ", lastUpdate=" + lastUpdate +
                ", paymentMethods=" + paymentMethods +
                ", loyaltyCards=" + loyaltyCards +
                '}';
    }
}
